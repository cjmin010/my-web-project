"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./data/users.ts":
/*!***********************!*\
  !*** ./data/users.ts ***!
  \***********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addUser: function() { return /* binding */ addUser; },\n/* harmony export */   deleteUser: function() { return /* binding */ deleteUser; },\n/* harmony export */   getCurrentUser: function() { return /* binding */ getCurrentUser; },\n/* harmony export */   getUsers: function() { return /* binding */ getUsers; },\n/* harmony export */   loginUser: function() { return /* binding */ loginUser; },\n/* harmony export */   logoutUser: function() { return /* binding */ logoutUser; },\n/* harmony export */   saveUsers: function() { return /* binding */ saveUsers; },\n/* harmony export */   setCurrentUser: function() { return /* binding */ setCurrentUser; },\n/* harmony export */   updateUser: function() { return /* binding */ updateUser; },\n/* harmony export */   validateEmail: function() { return /* binding */ validateEmail; },\n/* harmony export */   validatePassword: function() { return /* binding */ validatePassword; },\n/* harmony export */   validatePhone: function() { return /* binding */ validatePhone; },\n/* harmony export */   validateUserId: function() { return /* binding */ validateUserId; }\n/* harmony export */ });\n/* harmony import */ var _lib_crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/crypto */ \"(app-pages-browser)/./lib/crypto.ts\");\n/* harmony import */ var _lib_security__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/security */ \"(app-pages-browser)/./lib/security.ts\");\n\n\n// 초기 사용자 데이터 (비밀번호는 앱 시작 시 해싱됩니다)\nconst initialUsersData = [\n    {\n        id: \"admin\",\n        password: \"admin\",\n        name: \"관리자\",\n        email: \"admin@example.com\",\n        phone: \"010-0000-0000\",\n        address: \"서울특별시 강남구\",\n        addressDetail: \"테헤란로 123\",\n        zipCode: \"06123\",\n        role: \"admin\",\n        createdAt: \"2024-01-01\",\n        isActive: true,\n        isRejected: false\n    },\n    {\n        id: \"aaa\",\n        password: \"aaa\",\n        name: \"김철수\",\n        email: \"aaa@example.com\",\n        phone: \"010-1111-1111\",\n        address: \"서울특별시 서초구\",\n        addressDetail: \"강남대로 456\",\n        zipCode: \"06611\",\n        role: \"user\",\n        createdAt: \"2024-01-15\",\n        isActive: true\n    },\n    {\n        id: \"bbb\",\n        password: \"bbb\",\n        name: \"이영희\",\n        email: \"bbb@example.com\",\n        phone: \"010-2222-2222\",\n        address: \"서울특별시 마포구\",\n        addressDetail: \"홍대로 789\",\n        zipCode: \"04039\",\n        role: \"user\",\n        createdAt: \"2024-01-20\",\n        isActive: true\n    },\n    {\n        id: \"ccc\",\n        password: \"ccc\",\n        name: \"씨씨씨\",\n        email: \"ccc@example.com\",\n        phone: \"010-3333-3333\",\n        address: \"주소 미입력\",\n        role: \"user\",\n        createdAt: \"2024-05-25\",\n        isActive: false\n    }\n];\n// 로컬 스토리지 키\nconst USERS_STORAGE_KEY = \"mini_store_users\";\nconst CURRENT_USER_KEY = \"mini_store_current_user\";\nconst USERS_VERSION_KEY = \"mini_store_users_version\";\nconst CURRENT_VERSION = \"1.10\"; // 데이터 구조 변경 시 이 버전을 올립니다.\n// 메모리 내 사용자 캐시\nlet usersCache = null;\n// 초기 사용자 데이터를 동기적으로 생성 (서버 사이드 및 초기 클라이언트 렌더링용)\n// 비밀번호 해싱과 같은 비동기 작업은 포함하지 않음\nconst getInitialUsersSynchronously = ()=>{\n    return initialUsersData.map((user)=>({\n            id: user.id,\n            password: user.password || \"\",\n            name: user.name || \"N/A\",\n            email: user.email || \"N/A\",\n            phone: user.phone || \"N/A\",\n            address: user.address || \"N/A\",\n            addressDetail: user.addressDetail || \"\",\n            zipCode: user.zipCode || \"\",\n            role: user.role,\n            createdAt: user.createdAt || new Date().toISOString().split(\"T\")[0],\n            isActive: user.isActive === undefined ? true : user.isActive,\n            isRejected: user.isRejected === undefined ? false : user.isRejected,\n            failedLoginAttempts: 0,\n            isLocked: false,\n            mustChangePassword: false\n        }));\n};\n// 사용자 데이터 초기화 함수 (클라이언트 사이드 비동기)\nconst initializeUsers = async ()=>{\n    const hashedUsers = await Promise.all(initialUsersData.map(async (user)=>{\n        const hashedPassword = await (0,_lib_crypto__WEBPACK_IMPORTED_MODULE_0__.hashPassword)(user.password || \"\");\n        return {\n            id: user.id,\n            password: hashedPassword,\n            name: user.name || \"N/A\",\n            email: user.email || \"N/A\",\n            phone: user.phone || \"N/A\",\n            address: user.address || \"N/A\",\n            addressDetail: user.addressDetail || \"\",\n            zipCode: user.zipCode || \"\",\n            role: user.role,\n            createdAt: user.createdAt || new Date().toISOString().split(\"T\")[0],\n            isActive: user.isActive === undefined ? true : user.isActive,\n            isRejected: user.isRejected === undefined ? false : user.isRejected,\n            failedLoginAttempts: 0,\n            isLocked: false,\n            mustChangePassword: false\n        };\n    }));\n    saveUsers(hashedUsers);\n    return hashedUsers;\n};\n// 사용자 데이터 관리 함수들\nconst getUsers = ()=>{\n    // 서버 사이드 (API 라우트 등)\n    if (false) {}\n    // 클라이언트 사이드\n    if (usersCache) {\n        return usersCache;\n    }\n    const storedVersion = localStorage.getItem(USERS_VERSION_KEY);\n    const storedUsers = localStorage.getItem(USERS_STORAGE_KEY);\n    if (!storedUsers || storedVersion !== CURRENT_VERSION) {\n        console.log(\"Initializing or updating user data in localStorage.\");\n        const initialUsers = getInitialUsersSynchronously();\n        usersCache = initialUsers; // 먼저 동기 데이터로 캐시 채우기\n        // 백그라운드에서 비동기 해싱 및 저장\n        initializeUsers().then((hashedUsers)=>{\n            usersCache = hashedUsers; // 해싱된 데이터로 캐시 업데이트\n        });\n        return initialUsers; // 동기적으로 초기 데이터 우선 반환\n    }\n    try {\n        const parsedUsers = JSON.parse(storedUsers);\n        usersCache = parsedUsers;\n        return parsedUsers;\n    } catch (error) {\n        console.error(\"로컬 스토리지에서 사용자 정보를 파싱하는 데 실패했습니다.\", error);\n        localStorage.removeItem(USERS_STORAGE_KEY);\n        // 비동기 초기화 실행\n        initializeUsers().then((hashedUsers)=>{\n            usersCache = hashedUsers;\n        });\n        // 일단 빈 배열 반환, UI는 Context에 따라 리렌더링 될 것\n        return [];\n    }\n};\nconst saveUsers = (users)=>{\n    // 메모리 캐시 업데이트\n    usersCache = users;\n    if (false) {}\n    localStorage.setItem(USERS_STORAGE_KEY, JSON.stringify(users));\n    localStorage.setItem(USERS_VERSION_KEY, CURRENT_VERSION);\n};\nconst addUser = async (userData)=>{\n    const users = getUsers();\n    if (users.some((u)=>u.id === userData.id)) {\n        throw new Error(\"이미 존재하는 ID입니다.\");\n    }\n    const hashedPassword = await (0,_lib_crypto__WEBPACK_IMPORTED_MODULE_0__.hashPassword)(userData.password);\n    const newUser = {\n        ...userData,\n        password: hashedPassword,\n        createdAt: new Date().toISOString().split(\"T\")[0],\n        failedLoginAttempts: 0,\n        isLocked: false,\n        mustChangePassword: false\n    };\n    const updatedUsers = [\n        ...users,\n        newUser\n    ];\n    saveUsers(updatedUsers);\n    return newUser;\n};\nconst updateUser = async (id, updates)=>{\n    let users = getUsers();\n    const userIndex = users.findIndex((u)=>u.id === id);\n    if (userIndex === -1) {\n        throw new Error(\"사용자를 찾을 수 없습니다.\");\n    }\n    const updatedUser = {\n        ...users[userIndex],\n        ...updates\n    };\n    if (updates.password && updates.password !== users[userIndex].password) {\n        updatedUser.password = await (0,_lib_crypto__WEBPACK_IMPORTED_MODULE_0__.hashPassword)(updates.password);\n    }\n    const updatedUsers = [\n        ...users\n    ];\n    updatedUsers[userIndex] = updatedUser;\n    saveUsers(updatedUsers);\n    return updatedUser;\n};\nconst deleteUser = (id)=>{\n    const users = getUsers();\n    const filteredUsers = users.filter((u)=>u.id !== id);\n    saveUsers(filteredUsers);\n};\nconst loginUser = async (id, password)=>{\n    const users = getUsers();\n    const user = users.find((u)=>u.id === id);\n    if (!user) {\n        return {\n            success: false,\n            message: \"ID 또는 비밀번호가 올바르지 않습니다.\"\n        };\n    }\n    if (!user.isActive) {\n        return {\n            success: false,\n            message: \"비활성화된 계정입니다.\"\n        };\n    }\n    if (user.isLocked) {\n        return {\n            success: false,\n            message: \"계정이 잠겼습니다. 관리자에게 문의하세요.\"\n        };\n    }\n    const settings = (0,_lib_security__WEBPACK_IMPORTED_MODULE_1__.getSecuritySettings)();\n    const isValidPassword = await (0,_lib_crypto__WEBPACK_IMPORTED_MODULE_0__.verifyPassword)(password, user.password);\n    if (isValidPassword) {\n        const updatedUser = {\n            ...user,\n            failedLoginAttempts: 0\n        };\n        await updateUser(id, {\n            failedLoginAttempts: 0\n        });\n        return {\n            success: true,\n            message: \"로그인 성공\",\n            user: updatedUser\n        };\n    } else {\n        const newAttempts = user.failedLoginAttempts + 1;\n        let message = \"ID 또는 비밀번호가 올바르지 않습니다. (남은 시도: \".concat(settings.maxLoginAttempts - newAttempts, \"회)\");\n        let isLocked = user.isLocked;\n        if (newAttempts >= settings.maxLoginAttempts) {\n            isLocked = true;\n            message = \"로그인 시도 횟수를 초과하여 계정이 잠겼습니다. (\".concat(settings.maxLoginAttempts, \"회 초과)\");\n        }\n        await updateUser(id, {\n            failedLoginAttempts: newAttempts,\n            isLocked\n        });\n        return {\n            success: false,\n            message: message\n        };\n    }\n};\nconst getCurrentUser = ()=>{\n    if (false) {}\n    const stored = localStorage.getItem(CURRENT_USER_KEY);\n    try {\n        return stored ? JSON.parse(stored) : null;\n    } catch (e) {\n        return null;\n    }\n};\nconst setCurrentUser = (user)=>{\n    if (false) {}\n    if (user) {\n        localStorage.setItem(CURRENT_USER_KEY, JSON.stringify(user));\n    } else {\n        localStorage.removeItem(CURRENT_USER_KEY);\n    }\n};\nconst logoutUser = ()=>{\n    setCurrentUser(null);\n};\nconst validateUserId = (id)=>{\n    if (id.length < 4) return \"ID는 4자 이상이어야 합니다.\";\n    if (id.length > 20) return \"ID는 20자 이하여야 합니다.\";\n    if (!/^[a-zA-Z0-9_]+$/.test(id)) return \"ID는 영문, 숫자, 언더스코어만 사용 가능합니다.\";\n    return null;\n};\nconst validatePassword = (password)=>{\n    if (password.length < 4) return \"비밀번호는 4자 이상이어야 합니다.\";\n    // 정규식: 최소 8자, 하나 이상의 문자, 하나의 숫자 및 하나의 특수 문자\n    // if (!/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/.test(password)) {\n    //     return '비밀번호는 최소 8자, 하나 이상의 문자, 숫자, 특수문자를 포함해야 합니다.';\n    // }\n    return null;\n};\nconst validateEmail = (email)=>{\n    if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) return \"유효하지 않은 이메일 주소입니다.\";\n    return null;\n};\nconst validatePhone = (phone)=>{\n    if (!/^\\d{3}-\\d{3,4}-\\d{4}$/.test(phone)) return \"유효하지 않은 전화번호 형식입니다. (예: 010-1234-5678)\";\n    return null;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./data/users.ts\n"));

/***/ })

});